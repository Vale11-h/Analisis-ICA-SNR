# -*- coding: utf-8 -*-
"""Lab3Señales.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zCD220DmAxq5ZL7TTwBRAYwQRnj0q3rK
"""

from google.colab import files

uploaded = files.upload()  # Selecciona los 3 archivos MP3

import librosa
import numpy as np
import soundfile as sf
import matplotlib.pyplot as plt
from sklearn.decomposition import FastICA
from scipy.fft import fft, fftfreq
import pandas as pd
from tabulate import tabulate

# Función para calcular SNR
def calcular_snr(signal, noise):
    signal_power = np.mean(signal ** 2)
    noise_power = np.mean(noise ** 2)
    return 10 * np.log10(signal_power / noise_power)

# Cargar los audios
archivos = ["Micrófono-Alejandra.mp3", "Micrófono-Paula.mp3", "Micrófono-Valentina.mp3"]
audios = [librosa.load(archivo, sr=None, mono=True) for archivo in archivos]
fs = audios[0][1]  # Frecuencia de muestreo

# Cortar todas las señales al mismo tamaño
min_length = min(len(y) for y, _ in audios)
señales = np.vstack([y[:min_length] for y, _ in audios]).T

# Aplicar ICA para separar fuentes
ica = FastICA(n_components=3, random_state=42)
fuentes_separadas = ica.fit_transform(señales)

# Calcular el ruido (diferencia entre original y reconstruida por ICA)
ruidos = señales - ica.inverse_transform(fuentes_separadas)

# Calcular SNR para cada señal
snr_originales = [calcular_snr(señales[:, i], ruidos[:, i]) for i in range(3)]
snr_ica = [calcular_snr(fuentes_separadas[:, i], ruidos[:, i]) for i in range(3)]

# Guardar los audios separados con nombres personalizados
nombres_salida = [f"Voz-{archivo.split('-')[1].split('.')[0]}.mp3" for archivo in archivos]
for i, fuente in enumerate(fuentes_separadas.T):
    sf.write(nombres_salida[i], fuente, fs)

# Definir colores pastel
colores_original = ['#FFB6C1', '#FFB6C1', '#FFB6C1']  # Rosa pastel para originales
colores_ica = ['#D8BFD8', '#D8BFD8', '#D8BFD8']  # Morado pastel para ICA
colores_fft_original = ['#ADD8E6', '#ADD8E6', '#ADD8E6']  # Azul pastel para FFT original
colores_fft_ica = ['#98FB98', '#98FB98', '#98FB98']  # Verde pastel para FFT después de ICA

# Graficar formas de onda antes y después de ICA
fig, axes = plt.subplots(3, 2, figsize=(12, 9))
t = np.linspace(0, min_length / fs, min_length)

for i in range(3):
    # Forma de onda original
    axes[i, 0].plot(t, señales[:, i], label=f"Original {archivos[i]}", color=colores_original[i])
    axes[i, 0].set_title(f"Forma de onda de {archivos[i]}")
    axes[i, 0].set_xlabel("Tiempo [s]")
    axes[i, 0].set_ylabel("Amplitud")
    axes[i, 0].grid(True, linestyle='--', linewidth=0.5)

    # Forma de onda después de ICA
    axes[i, 1].plot(t, fuentes_separadas[:, i], label=f"ICA {nombres_salida[i]}", color=colores_ica[i])
    axes[i, 1].set_title(f"Forma de onda separada ICA - {nombres_salida[i]}")
    axes[i, 1].set_xlabel("Tiempo [s]")
    axes[i, 1].set_ylabel("Amplitud")
    axes[i, 1].grid(True, linestyle='--', linewidth=0.5)

plt.tight_layout()
plt.show()

# Graficar espectros de frecuencia con colores pastel
fig, axes = plt.subplots(3, 2, figsize=(12, 9))
frequencies = fftfreq(min_length, 1/fs)

for i in range(3):
    # FFT original
    fft_original = np.abs(fft(señales[:, i]))
    axes[i, 0].plot(frequencies[:min_length // 2], fft_original[:min_length // 2], label="Original", color=colores_fft_original[i])
    axes[i, 0].set_title(f"Espectro de frecuencia de {archivos[i]}")
    axes[i, 0].set_xlabel("Frecuencia [Hz]")
    axes[i, 0].set_ylabel("Magnitud")
    axes[i, 0].grid(True, linestyle='--', linewidth=0.5)

    # FFT después de ICA
    fft_ica = np.abs(fft(fuentes_separadas[:, i]))
    axes[i, 1].plot(frequencies[:min_length // 2], fft_ica[:min_length // 2], label="ICA", color=colores_fft_ica[i])
    axes[i, 1].set_title(f"Espectro de frecuencia después de ICA - {nombres_salida[i]}")
    axes[i, 1].set_xlabel("Frecuencia [Hz]")
    axes[i, 1].set_ylabel("Magnitud")
    axes[i, 1].grid(True, linestyle='--', linewidth=0.5)

plt.tight_layout()
plt.show()

# Crear tabla de SNR con bordes y color
snr_data = {
    "Fuente": ["Alejandra", "Paula", "Valentina"],
    "SNR Original (dB)": snr_originales,
    "SNR ICA (dB)": snr_ica
}

snr_df = pd.DataFrame(snr_data)
print(tabulate(snr_df, headers='keys', tablefmt='fancy_grid', showindex=False))
from google.colab import files

# Descargar los audios generados
for nombre in nombres_salida:
    files.download(nombre)